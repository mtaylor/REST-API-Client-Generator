String.class_eval do
  def camel_case
    return self if self !~ /_/ && self =~ /[A-Z]+.*/
    split('_').map{|e| e.capitalize}.join
  end
end

module Reacg
  module Generators
    class Ruby
      # All Generators must implement this method.
      # A hash of the reacg options is passed in.
      def self.create_client(config)
        # Create tmp directory
        FileUtils.rm_rf 'tmp'
        Dir.mkdir("build") unless File.exists?("build")
        Dir.mkdir("tmp")
        Dir.chdir("tmp")

        # Create a new Gem
        system "bundle gem #{config["name"]}"
        Dir.chdir(config["name"])

        # Add dependencies
        File.open("Gemfile", "w") do |f|
          f.write "source :rubygems\n"
          f.write "gemspec\n"
          f.write "gem 'active_resource'"
        end

        # Create GemSpec
        create_gemspec(config)

        Dir.chdir("lib")
        # Load Classes
        File.open("#{config['name']}.rb", "w") do |f|
          f.write "Dir[File.dirname(__FILE__) + '/**/*.rb'].each do |file|"
          f.write "\n  require file"
          f.write "\nend"
        end

        Dir.chdir(config["name"])
        create_base_class(config)
        config["resources"].each do |name, options|
          create_class(name, options)
        end

        # Package Gem
        Dir.chdir("../..")
        system "gem build #{config['name']}.gemspec"
        FileUtils.mv("#{config['name']}-0.0.1.gem", '../../build')
        FileUtils.rm_rf 'tmp'
      end

      private
      def self.create_class(name, options)
        File.open("#{name}.rb", "w") do |f|
          f.write "module Tim\n"
          f.write "  class #{name.camel_case} < Base\n"
          f.write "  end\n"
          f.write "end"
        end
      end

      def self.create_base_class(config)
        File.open("base.rb", "w") do |f|
          f.write "module Tim\n"
          f.write "  class Base < ActiveRecord::Base\n"
          f.write "    self.site = '#{config["endpoints"]["entrypoint"]}'\n"
          f.write "  end\n"
          f.write "end"
        end
      end

      # FIXME We should generate this from some global config
      def self.create_gemspec(config)
        File.open("#{config['name']}.gemspec", "w") do |f|
          f.write "# -*- encoding: utf-8 -*-\n"
          f.write "lib = File.expand_path('../lib', __FILE__)\n"
          f.write "$LOAD_PATH.unshift(lib) unless $LOAD_PATH.include?(lib)\n"
          f.write "require 'tim/version'\n"
          f.write "Gem::Specification.new do |gem|\n"
          f.write "  gem.name          = '#{config['name']}'\n"
          f.write "  gem.version       = '0.0.1'\n"
          f.write "  gem.authors       = ['Autogenerated From ReACG']\n"
          f.write "  gem.email         = ['autogen@reacg.org']\n"
          f.write "  gem.description   = 'autogenerated ReST Client lib'\n"
          f.write "  gem.summary       = 'autogenerated ReSt Client lib'\n"
          f.write "  gem.homepage      = 'http://www.reacg.org'\n"
          f.write "  gem.executables   = gem.files.grep(%r{^bin/}).map{ |f| File.basename(f) }\n"
          f.write "  gem.test_files    = gem.files.grep(%r{^(test|spec|features)/})\n"
          f.write "  gem.test_files    = gem.files.grep(%r{^(test|spec|features)/})\n"
          f.write "  gem.require_paths = ['lib']\n"
          f.write "end"
        end
      end

    end
  end
end